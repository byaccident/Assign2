{
    "contents" : "## The following functions cache the inverse for a matrix 'x', and store for later retrieval to reduce repeat calculations\n\n## The following function makes a cache of the argument 'x', a matrix\n\nmakeCacheMatrix <- function(x = matrix()) {\n  mInv<-NULL\n  set<-function(y){\n    x<<-y\n    mInv<<-NULL\n  }\n  get<-function() x\n  setmatrix<-function(solve) mInv<<- solve\n  getmatrix<-function() mInv\n  list(set=set, get=get,\n       setmatrix=setmatrix,\n       getmatrix=getmatrix)\n}\n\n\n## The following function solves for the inverse of the matrix supplied in cacheMatrix and retrieves this value \n\n\n  \ncacheSolve <- function(x=matrix(), ...) {\n    mInv<-x$getmatrix()\n    if(!is.null(mInv)){\n      message(\"getting cached data\")\n      return(mInv)\n    }\n    matrix<-x$get()\n    mInv<-solve(matrix, ...)\n    x$setmatrix(mInv)\n    mInv\n  }",
    "created" : 1440271415310.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3616869361",
    "id" : "123FB878",
    "lastKnownWriteTime" : 1440275886,
    "path" : "~/Coursera/Rprogramming/Assign2/makeCacheMatrix.R",
    "project_path" : "makeCacheMatrix.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}